<?php
/**
 * @file
 * Main hooks for Social Metatags.
 */

/**
 * Implements hook_menu().
 */
function islandora_social_metatags_menu() {
  return array(
    'admin/islandora/tools/social_metatags' => array(
      'title' => 'Islandora Social Metatags',
      'description' => 'Configure Social Metatags.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_social_metatags_admin_form'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/admin.form.inc',
    ),
  );
}

/*
* Implements hook_islandora_view_object()
*/
function islandora_social_metatags_islandora_view_object() {
 // first grab the MODS metadata and set all variables
  $object = menu_get_object('islandora_object', 2);
  // Get Title.
  if (!isset($object['MODS'])) {
      return;
     }
  $doc = new DOMDocument();
  $doc->loadXML($object['MODS']->content);
  $xpath = new DOMXPath($doc);
  $xpath->registerNamespace('mods', 'http://www.loc.gov/mods/v3');
  $xpath_results = $xpath->query(
    variable_get('islandora_social_metatags_title_xpath', '/mods:mods/mods:titleInfo/mods:title')
  );
  if ($xpath_results->length == 0) {
    return;
  }
  $title = $xpath_results->item(0)->nodeValue;
  if (!$title) {
    return;
  }

  // Get Abstract
  $doc = new DOMDocument();
  $doc->loadXML($object['MODS']->content);
  $xpath = new DOMXPath($doc);
  $xpath->registerNamespace('mods', 'http://www.loc.gov/mods/v3');
  $xpath_results = $xpath->query(
    variable_get('islandora_social_metatags_abstract_xpath', '/mods:mods/mods:abstract')
  );

  // If there is no Abstract field, use a default message.
  if ($xpath_results->length == 0) {
    $abstract = variable_get('islandora_social_metatags_no_description', 'No description given.');
  }
  // In case of abstract field <abstract/>, use string length.
  elseif (strlen($xpath_results->item(0)->nodeValue) == 0) {
        $abstract = variable_get('islandora_social_metatags_no_description', 'No description given.');
  }
  else {
    $abstract = $xpath_results->item(0)->nodeValue;
  }

  $pid = $object->id;

  // Get Image path and item type. Item type required for schema.org tags.
  if (in_array('ir:citationCModel', $object->models) || in_array('ir:thesisCModel', $object->models)) {
    $image_datastream = variable_get('islandora_social_metatags_citation_datastream', 'PREVIEW');
    $itemtype = "Article";
  }
  elseif (in_array('islandora:sp_large_image_cmodel', $object->models)) {
    $image_datastream = variable_get('islandora_social_metatags_largeimage_datastream', 'JPG');
    $itemtype = "ImageObject";
  }
  elseif (in_array('islandora:sp_basic_image', $object->models)) {
    $image_datastream = variable_get('islandora_social_metatags_basicimage_datastream', 'MEDIUM_SIZE');
    $itemtype = "ImageObject";
  }
  elseif (in_array('islandora:sp_videoCModel', $object->models)) {
    $image_datastream = variable_get('islandora_social_metatags_video_datastream', 'TN');
    $itemtype = "VideoObject";
  }
  elseif (in_array('islandora:personCModel', $object->models)) {
    $image_datastream = "TN";
    $itemtype = "Person";
  }
  elseif (in_array('islandora:sp_pdf', $object->models) || in_array('islandora:sp_document', $object->models)) {
    $image_datastream = "PREVIEW";
    $itemtype = "DigitalDocument";
  }
  elseif (in_array('islandora:collectionCModel', $object->models)) {
    $image_datastream = "TN";
    $itemtype = "CollectionPage";
  }
  elseif (in_array('islandora:sp-audioCModel', $object->models)) {
    $image_datastream = "TN";
    $itemtype = "AudioObject";
  }
  elseif (in_array('islandora:bookCModel', $object->models) || in_array ('islandora:pageCModel', $object->models)) {
    $image_datastream = "TN";
    $itemtype = "Book";
  }
  elseif (in_array('islandora:newspaperCModel', $object->models) || in_array('islandora:newspaperIssueCModel', $object->models)) {
    $image_datastream = "TN";
    $itemtype = "NewsArticle";
  }
  elseif (in_array('islandora:newspaperPageCModel', $object->models)) {
    $image_datastream = "JPG";
    $itemtype = "NewsArticle";
  }
  elseif (in_array('islandora:eventCModel', $object->models)) {
    $image_datastream = "TN";
    $itemtype = "Event";
  }
  elseif (in_array('islandora:placeCModel', $object->models)) {
    $image_datastream = "TN";
    $itemtype = "Place";
  }
  elseif (in_array('islandora:organizationCModel', $object->models)) {
    $image_datastream = "TN";
    $itemtype = "Organization";
  }
  elseif (in_array('islandora:sp_disk_image', $object->models)) {
    $image_datastream = "TN";
    $itemtype = "DataCatalog";
  }
  elseif (in_array('islandora:sp_web_archive', $object->models)) {
    $image_datastream = "JPG";
    $itemtype = "WebSite";
  }
  else {
    $image_datastream = "TN";
    $itemtype = "Article";
  }

  global $base_url;
  $image = $base_url . "/islandora/object/" . $pid . "/datastream/" . $image_datastream . "/view";
  $og_url = $base_url . "/islandora/object/" . $pid;
// Check whether the image datastream actually exists..

  $file = $image;
  $file_headers = @get_headers($file);

  if (!$file_headers || strpos($file_headers[0], '404')) {
    $exists = FALSE;
  }
  else {
    $exists = TRUE;
  }
 
// If the datastream does not exist, use the default image path. 
  if (!$exists) {
    $image = $base_url . variable_get('islandora_social_metatags_noimage', '/sites/all/modules/islandora/images/folder.png');
  }

  // Get Twitter user
  $twitter_user = variable_get('islandora_social_metatags_twitter_user');

  // Turns out that Twitter no longer recognizes older card types, so this is the only option.
  $card_type = "summary_large_image";

/*
* Implements drupal_add_html_head() to inject the meta tags
*/
  $site_name = variable_get('site_name', 'Islandora');
  $tags = array(
    'Twitter card' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'twitter:card',
        'content' => $card_type
      )
    ),
    'Twitter Title' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'twitter:title',
        'content' => $title
      )
    ),
    'Facebook Title' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:title',
        'content' => $title
      )
    ),
    'Twitter image' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'twitter:image',
        'content' => $image
      )
    ),
    'Facebook image' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:image',
        'content' => $image
      )
    ),
    'Twitter site user' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'twitter:site',
        'content' => $twitter_user
      )
    ),
    'Twitter description' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'twitter:description',
        'content' => $abstract 
      )
    ),
    'Facebook description' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:description',
        'content' => $abstract
      )
    ),
    'Object type' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:type',
        'content' => 'article'
      )
    ),
    'Facebook URL' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:url',
        'content' => $og_url
      )
    ),
    'Facebook site name' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:site_name',
        'content' => $site_name
      )
    ),
    'Schema.org Title' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'itemprop' => 'name',
        'content' => $title
      )
    ),
    'Schema.org Image' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'itemprop' => 'image',
        'content' => $image
      )
    ),
    'Schema.org Description' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'itemprop' => 'description',
        'content' => $abstract
      )
    )
  );

  foreach ($tags as $key => $val) {
    drupal_add_html_head($val, $key);
  }

// Add the schema.org meta tags separately, as they require their own div.
  print(
    '<div itemscope itemtype = "http://schema.org/' . $itemtype . '">
    <meta itemprop="name" content="' . $title . '">
    <meta itemprop="description" content="' . $abstract . '">
    <meta itemprop="image" content="' . $image . '"></div>'
  );
}
